import telebot
from telebot import types
import pymysql
import pymysql.cursors
import ast
import datetime
from datetime import *
import time
from time import strftime
import bdfunc
from bdfunc import *
import os  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
import openpyxl  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤
import random
from excel import *
import random

token = "817361693:AAFadWYZfaDiu9YUTgvPnNvisdx7-SwYnL4"
bot = telebot.TeleBot(token)



# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –Ω–∞–∂–º–µ–Ω—Ç –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞.
# –í—Ö–æ–¥—è—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ message. –¢–æ –µ—Å—Ç—å –æ–Ω–∞ –Ω–∞ –¥–æ–ª–∂–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–∞ —Å–æ–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

def view_test(message, questionid, testid):
    #–£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É —Å–æ —Å—Ç–∞—Ä—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –Ω–µ –≤–æ–ø—Ä–æ—Å–æ–º....

    # –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    try:  # –ü—Ä–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏...
        test_result_info = read_db_row("tests_result", test_id=testid, chat_id=message.chat.id)
    except:  # –ï—Å–ª–∏ –Ω–µ—Ç—É - —Å–æ–∑–¥–∞–µ–º...?
        print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–µ—Å—Ç–∞.... –ù–∞–¥–æ —Å–∑–¥–∞—Ç—å")
        id = write_db_insert("tests_result", chat_id=message.chat.id, test_id=tetst_id)
        test_result_info = read_db_row("tests_result", id=id)
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –ë–î –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã result_previous. –§–æ—Ä–º–∞—Ç - {question_id:[1,2,3,4,5],... }
    result_previous = test_result_info['result_previous']
    try:
        result_previous = ast.literal_eval(result_previous)
    except:
        result_previous = {}
    result_previous_local = []
    try:
        result_previous_local = list(set(result_previous[(int(questionid))]))
    except:

        print("–û–®–ò–ë–ö–ê result_previous_local 1")

    # –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ –≤ —è—á–µ–π–∫–∞—Ö –∏ –≤–Ω–æ—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ(–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞)
    td = ""
    if test_result_info['time_on'] == None or "":
        now = datetime.now()
        td = timedelta(minutes=float(test_result_info['time_delta']))
        end = now + td
        # –í–Ω–æ—Å–∏–º –≤ –±–∞–∑—É –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞.
        write_db_update_ultimate("tests_result", find__chat_id=message.chat.id, find__test_id=testid,
                                 time_on=now, time_off=end)
        td = str(td.seconds // 60) +":" + str(td.seconds - (td.seconds // 60)*60)
    else:
        now = datetime.now()
        end = test_result_info['time_off']
        # end = datetime.strptime(end, "%Y-%m-%d %H:%M:%S")
        if end > now:
            td = end - now
            td = str(td.seconds // 60) +":" + str(td.seconds - (td.seconds // 60)*60)
        else:
            td = "00:00"


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –≤–æ–ø—Ä–æ—Å–∞.
    keyboard = types.InlineKeyboardMarkup()
    callback_button_1 = types.InlineKeyboardButton(text="1Ô∏è‚É£ ",
                                                   callback_data="testform:1:"+str(questionid)+":"+str(testid))
    callback_button_2 = types.InlineKeyboardButton(text="2Ô∏è‚É£ ",
                                                   callback_data="testform:2:"+str(questionid)+":"+str(testid))
    callback_button_3 = types.InlineKeyboardButton(text="3Ô∏è‚É£ ",
                                                   callback_data="testform:3:"+str(questionid)+":"+str(testid))
    callback_button_4 = types.InlineKeyboardButton(text="4Ô∏è‚É£ ",
                                                   callback_data="testform:4:"+str(questionid)+":"+str(testid))
    callback_button_5 = types.InlineKeyboardButton(text="5Ô∏è‚É£ ",
                                                   callback_data="testform:5:"+str(questionid)+":"+str(testid))
    callback_button_left = types.InlineKeyboardButton(text="‚¨Ö–ù–∞–∑–∞–¥",
                                                      callback_data="testform:left:"+str(questionid)+":"+str(testid))
    callback_button_right = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥‚û°",
                                                       callback_data="testform:right:"+str(questionid)+":"+str(testid))
    callback_button_confirm = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç",
                                                         callback_data="testform:confirm:"+str(questionid)+":"+str(testid))
    callback_button_close = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å",
                                                       callback_data="testform:close:"+str(questionid)+":"+str(testid))

    keyboard.row(callback_button_1, callback_button_2, callback_button_3, callback_button_4, callback_button_5)
    keyboard.row(callback_button_left, callback_button_confirm, callback_button_right)
    keyboard.row(callback_button_close)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    generic_questions = ast.literal_eval(test_result_info["generic_questions"])
    nowid = generic_questions.index(int(questionid))
    number_question = "–í–æ–ø—Ä–æ—Å: " + str(nowid+1) + "/" + str(len(generic_questions))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
    question_info = read_db_row("tests", id=str(questionid))
    question = "‚ô¶" + number_question + "‚ô¶Ô∏è–û—Å—Ç–∞–ª–æ—Å—å üïë " + str(td) + "\n\n" + "‚ùì" + question_info['question']



    answer1 = ast.literal_eval(question_info['answers'])[1]
    if 1 in result_previous_local:
        answer1 = "<b>" + "üîò 1Ô∏è‚É£." + str(answer1) + "</b>"
    else:
        answer1 = "<b>" + "‚ö™ 1Ô∏è‚É£." + str(answer1) + "</b>"

    answer2 = ast.literal_eval(question_info['answers'])[2]
    if 2 in result_previous_local:
        answer2 = "<b>" + "üîò 2Ô∏è‚É£." + str(answer2) + "</b>"
    else:
        answer2 = "<b>" + "‚ö™ 2Ô∏è‚É£." + str(answer2) + "</b>"

    answer3 = ast.literal_eval(question_info['answers'])[3]
    if 3 in result_previous_local:
        answer3 = "<b>" + "üîò 3Ô∏è‚É£." + str(answer3) + "</b>"
    else:
        answer3 = "<b>" + "‚ö™ 3Ô∏è‚É£." + str(answer3) + "</b>"

    answer4 = ast.literal_eval(question_info['answers'])[4]
    if 4 in result_previous_local:
        answer4 = "<b>" + "üîò 4Ô∏è‚É£." + str(answer4) + "</b>"
    else:
        answer4 = "<b>" + "‚ö™ 4Ô∏è‚É£." + str(answer4) + "</b>"

    answer5 = ast.literal_eval(question_info['answers'])[5]
    if 5 in result_previous_local:
        answer5 = "<b>" + "üîò 5Ô∏è‚É£." + str(answer5) + "</b>"
    else:
        answer5 = "<b>" + "‚ö™ 5Ô∏è‚É£." + str(answer5) + "</b>"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    x = (question, answer1,answer2, answer3, answer4, answer5)
    question_text = "<b>%s</b> \n\n <b></b>%s \n <b></b>%s \n <b></b>%s \n <b></b>%s \n <b></b>%s" % x

    if td == "00:00" and test_result_info['result_percent'] is None:
        result = confirm_test(test_result_info['id'])
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞—Å—á–∏—Ç–∞–Ω—ã. ")

    if test_result_info['result_percent'] is None or test_result_info['result_percent'] == "":

        try:
            bot.edit_message_text(question_text, message.chat.id, message.message_id, parse_mode="HTML")
            bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=keyboard)
        except:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, question_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        bot.delete_message(message.chat.id, message.message_id)
        percent = test_result_info['result_percent']
        keyboard = types.InlineKeyboardMarkup()
        close_button_close = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å",
                                                       callback_data="–ó–∞–∫—Ä—ã—Ç—å")
        keyboard.row(close_button_close)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û–Ω –≤–∞–º –ø—Ä–∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.",
                         parse_mode="HTML", reply_markup=keyboard)



# **********************–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ñ–æ—Ä–º–µ —Ç–µ—Å—Ç–∞*****************************.

def testform_buttons_click(message, data, call):
    #–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ call.data.
    button = data.split(':')[1]
    question_id = data.split(':')[2]
    test_id = data.split(':')[3]
    #–ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –≤—Å—é –∏–Ω—Ñ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ (–®–∞–±–ª–æ–Ω–µ).
    test_info = read_db_row("tests", id=test_id)
    #–ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    try: # –ü—Ä–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏...
        test_result_info = read_db_row("tests_result", test_id=test_id, chat_id=message.chat.id)
    except: #–ï—Å–ª–∏ –Ω–µ—Ç—É - —Å–æ–∑–¥–∞–µ–º...?
        id = write_db_insert("tests_result", chat_id=message.chat.id, test_id=tetst_id)
        test_result_info = read_db_row("tests_result", id=id)
        print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–µ—Å—Ç–∞.... –ù–∞–¥–æ —Å–∑–¥–∞—Ç—å")


    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –ë–î –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã result_previous. –§–æ—Ä–º–∞—Ç - {question_id:[1,2,3,4,5],... }
    # –°—é–¥–∞ –≤–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —é–∑–µ—Ä –≤–∏–¥–µ–ª, —á—Ç–æ –æ–Ω –Ω–∞–≤–∏–±–∏—Ä–∞–ª.
    result_previous = test_result_info['result_previous']
    try:
        result_previous = ast.literal_eval(result_previous)
    except:
        result_previous = {}
    result_previous_local = []
    try:
        result_previous_local = list(set(result_previous[(int(question_id))]))
    except:

        print("–û–®–ò–ë–ö–ê result_previous_local 2")


    #–ï—Å–ª–∏ –∫–Ω–æ–∫–∞ –æ—Ç 1 –¥–æ 5.
    for key in range(1,6):
        if button == str(key):
            if key not in result_previous_local:
                result_previous_local.append(key)
                print(result_previous_local)
            else:
                result_previous_local.remove(key)


    generic_questions = ast.literal_eval(test_result_info["generic_questions"])
    nowid = generic_questions.index(int(question_id))

    if button == "left":
        print(nowid)
        if nowid > 0:
            nowid = nowid - 1
        else:
            pass
    elif button == "right":
        idscount = len(generic_questions)-1
        if nowid < idscount:
            nowid = nowid + 1
        else:
            pass
    elif button == "confirm":
        # –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.
        if len(generic_questions) > 1:
            #–°–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å —É–±–∏—Ä–∞–ª—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞—á–∏(–£–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –ë–î –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ Generic questions).
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –í–æ–ø—Ä–æ—Å —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
            generic_questions.pop(nowid)
            nowid = random.randint(0, len(generic_questions))

            #nowid = nowid - 1
        else:
            result = confirm_test(test_result_info['id'])
    # –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ç–µ—Å—Ç, –µ—Å–ª–∏ –ø—Ä–æ–∫–ª–∞—Ü–∞–Ω—ã –≤—Å–µ –æ—Ç–≤–µ—Ç—ã.
    elif button == "close":
        result = confirm_test(test_result_info['id'])

    #### –î–æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –±–æ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞–ª –æ–∫–Ω–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –≤ –ë–î.
    # –°—á–∏—Ç–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞, –≤—ã–¥–∞–≤–∞–ª –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!

    result_previous[int(question_id)] = result_previous_local
    write_db_update_ultimate("tests_result", find__chat_id=message.chat.id, find__test_id=test_id,
                             result_previous=result_previous, generic_questions=generic_questions)
    view_test(message, generic_questions[nowid], test_id)


def confirm_test(test_id):
    print("RESULT TEST ID" + str(test_id))
    test_info = read_db_row("tests_result", id=test_id)
    result_previous = ast.literal_eval(test_info['result_previous'])
    test_example_id = test_info['test_id']
    test_example_info = read_db_row("tests_created", id=test_example_id)
    question_numbers = ast.literal_eval(test_example_info['question_ids'])
    trueanswers = {}
    for question in question_numbers:
        question_info = read_db_row("tests", id=question)
        true_answer = ast.literal_eval(question_info['truenumbers'])
        trueanswers[question] = true_answer
    print(trueanswers)
    print(result_previous)
    if result_previous == trueanswers:
        print("–í–°–µ –≤–µ—Ä–Ω–æ!")
    trueanswercount = 0
    for item in trueanswers.keys():
        if trueanswers[item] == result_previous[item]:
            trueanswercount += 1
    answercount = len(trueanswers)
    percent = int(trueanswercount/answercount*100)
    print(percent)
    time=datetime.now()
    write_db_update_ultimate("tests_result", find__id=test_id,
                             result_percent=percent, result_full=result_previous, time_off=time)
    return percent
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@bot.message_handler(commands=['12345'])
def test(message):
    pass
    view_test(message, '22', '1')

@bot.callback_query_handler(func=lambda call: "testform" in call.data)
def testform(call):
    testform_buttons_click(call.message, call.data, call)
"""


# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# –°–û–ó–î–ê–¢–¨ –¢–ï–°–¢ –ü–û –ù–ê–ó–í–ê–ù–ò–Æ –¢–ï–°–¢–ê

def create_test_on_name(input_call, input_message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—Å—ç–¥–∂, –∞ —á—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    # try - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–ª–ª–±—ç–∫–∞
    # except - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–ò –∫–æ–ª–ª–±—ç–∫–∏ –∏ –ø—Ä–æ—Å—Ç—ã–µ –≤–≤–æ–¥—ã —Ç–µ–∫—Å—Ç–∞)
    try:
        chat_id = input_call.message.chat.id
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç.
        user_info = read_db_row("user_base", chat_id=chat_id)
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ operation.

        write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="–°–¥–µ–ª–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Å—Ç–∞")

        # 1.–ù–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ—á–µ–Ω—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.
        test_names = list(set(read_db_array("tests", "test_name")))
        keyboard = types.InlineKeyboardMarkup()
        for test_name in test_names:
            test_name_button = types.InlineKeyboardButton(text=test_name, callback_data=test_name)
            keyboard.add(test_name_button)
        test_name_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="–ó–∞–∫—Ä—ã—Ç—å")
        keyboard.add(test_name_button)
        bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä", reply_markup=keyboard)

    except:
        # –ü–∏—Ö–∞–µ–º –µ—â–µ 1 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Ç–æ—Ä–∏—á–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥.
        try:
            chat_id = input_message.message.chat.id
            bot.delete_message(chat_id,input_message.message.message_id)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞.
            if input_message.data in read_db_array("tests", "test_name"):
                # !–í–Ω–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö(–ù–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É). –ò –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–æ–∂–µ!
                question_array = read_db_array("tests", "id", test_name=input_message.data)
                write_db_insert("tests_created", question_ids=question_array, test_name=input_message.data,
                                create_status="–°–æ–∑–¥–∞—ë—Ç—Å—è")

                user_types = list(set(read_db_array("user_base", "user_type")))
                keyboard = types.InlineKeyboardMarkup()
                for user_type in user_types:
                    user_type_button = types.InlineKeyboardButton(text=user_type, callback_data=user_type)
                    keyboard.add(user_type_button)
                close_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="–ó–∞–∫—Ä—ã—Ç—å")
                keyboard.add(close_button)
                bot.send_message(chat_id, "–î–ª—è –∫–æ–≥–æ –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç?", reply_markup=keyboard)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.
            elif input_message.data in read_db_array("user_base", "user_type"):
                # !–í–Ω–æ—Å–∏–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç.
                user_ids = read_db_array("user_base", "chat_id", user_type=input_message.data)
                write_db_update_ultimate("tests_created", find__create_status="–°–æ–∑–¥–∞—ë—Ç—Å—è", user_ids=user_ids,
                                         open_status="close", user_type=str(input_message.data))
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ** –º–∏–Ω—É—Ç")


            else:
                pass
        except:
            chat_id = input_message.chat.id
            text = input_message.text
            if "–º–∏–Ω—É—Ç" in text:
                delta = int(text.split(" ")[0])
                # delta = datetime.strptime(str(delta), "%M").time()
                # –¢—É—Ç –≤–Ω–æ—Å–∏–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.
                write_db_update_ultimate("tests_created", find__create_status="–°–æ–∑–¥–∞—ë—Ç—Å—è", time_delta=delta)
                bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? –í–Ω–µ—Å–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ** –¥–Ω–µ–π")
            elif "–¥–Ω–µ–π" in text:
                days = int(text.split(" ")[0])
                # –ù—É –∏ —Ç—É—Ç –≤–Ω–æ—Å–∏–º –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞(–ü–æ—Å—á–∏—Ç–∞—Ç—å —Ä—É—á–∫–∞–º–∏)
                now = datetime.now()
                daydelta = timedelta(days=days)
                dateoff = now + daydelta
                # –î–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —é–∑–µ—Ä–∞–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω —Ç–µ—Å—Ç.
                test_info = read_db_row("tests_created", create_status="–°–æ–∑–¥–∞—ë—Ç—Å—è")
                user_ids = test_info['user_ids']
                user_ids = ast.literal_eval(user_ids)
                test_name = test_info['test_name']
                for user_id in user_ids:
                    bot.send_message(user_id, "–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Ç–µ—Å—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é!\n"
                                              "–ù–∞–∑—ã–≤–∞–µ—Ç—Å—è " + test_name)

                write_db_update_ultimate("tests_created", find__create_status="–°–æ–∑–¥–∞—ë—Ç—Å—è", time_off=dateoff, time_on=now,
                                         creator_id=chat_id, create_status="–°–æ–∑–¥–∞–Ω")
                # –í—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å".

                write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="mainmenu")
                bot.send_message(chat_id, "–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!")


                main_menu_to_user(message=input_message)
            elif len(text)<15:
                bot.send_message(chat_id, "–ß–µ-—Ç–æ –≤—ã–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏... –ü—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="mainmenu")
                main_menu_to_user(message=input_message)


# –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø+–í–´–í–û–î –¢–ï–°–¢–ê(–í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ú–û–î–£–õ–ï–ú test_func)
def view_test_and_start(input_call, input_message):
    try:
        # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
        print("–í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ—á–µ–Ω—å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
        chat_id = input_call.message.chat.id
        call = input_call
        write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="–ù–∞–¥–æ –ø—Ä–æ–π—Ç–∏")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        # 1.–ù–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
        now = datetime.now()
        user_type = read_db_row("user_base", chat_id=chat_id)['user_type']
        try:
            tests_array = read_db_array_universe("tests_created", "id", time_off=">"+str(now), open_status="=close", user_type="="+user_type)
        except:
            tests_array = []

        try:
            complete_array = read_db_array("tests_result", "id", chat_id=call.message.chat.id)
        except:
            complete_array = []

        tests_array = list(set(tests_array) - set(complete_array))
        keyboard = types.InlineKeyboardMarkup()
        for test in tests_array:
            test_info = read_db_row("tests_created", id=test)
            test_button = types.InlineKeyboardButton(text=test_info['test_name'], callback_data="–ù–æ–º–µ—Ä:" + str(test))

            date = test_info['time_off']
            datestring = date.strftime("%d/%m/%Y %H:%M")
            date_button = types.InlineKeyboardButton(text="–î–æ "+str(datestring), callback_data="12345")
            keyboard.add(test_button, date_button)
        close_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="–ó–∞–∫—Ä—ã—Ç—å")
        keyboard.add(close_button)
        message_text = ""
        if len(tests_array)>0:
            message_text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –í–∞—Å:"
        else:
            message_text = "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."
        bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard)
    except:
        try:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
            chat_id = input_message.message.chat.id
            call = input_message
            if "–ù–æ–º–µ—Ä" in call.data:
                # –í—ã–≤–æ–¥ –æ–∫–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–∞
                test_id = call.data.split(":")[1]
                keyboard = types.InlineKeyboardMarkup()
                test_button_start = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="–ù–∞—á–∞—Ç—å:"+str(test_id))
                test_button_close = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="–ó–∞–∫—Ä—ã—Ç—å")
                keyboard.row(test_button_start, test_button_close)
                test_info = read_db_row("tests_created", id=test_id)
                x = (test_info['test_name'], str(test_info['question_ids'].count(",")+1), test_info['time_off'], test_info['time_delta'])
                test_detail = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: %s \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: %s \n–ü—Ä–æ–π—Ç–∏ –¥–æ: %s \n–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ %s –º–∏–Ω—É—Ç." % x
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, test_detail, reply_markup=keyboard)

            if "–ù–∞—á–∞—Ç—å" in call.data:
                test_id = call.data.split(":")[1]
                test_info = read_db_row("tests_created", id=test_id)
                question_ids = ast.literal_eval(test_info['question_ids'])
                test_name = test_info['test_name']
                time_delta = test_info['time_delta']
                id = write_db_insert("tests_result", chat_id=call.message.chat.id, test_id=test_id,
                                     generic_questions=question_ids, test_name=test_name, time_delta=time_delta)
                view_test(call.message, str(question_ids[0]), str(test_id))
            else:
                pass

            if "testform" in call.data:
                testform_buttons_click(call.message, call.data, call)

        except:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
            chat_id = input_message.chat.id
            message = input_message
            text = message.text
            if text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                bot.send_message(message.chat.id,
                                 "–í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Å—Ç–∞ –Ω–µ–ª—å–∑—è. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç, –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ —Ä–∞–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.")
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞–∫–æ–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ñ–æ—Ä–∞ –∏ –µ—â–µ —Ä–∞–∑ –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –µ–º—É —ç—Ç–æ –æ–∫–Ω–æ.
                # –≠—Ç–æ –Ω–∞–¥–æ –≤—ã—Ü–µ–ø–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ –∫–∞–∫–æ–π test_id —É –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –ë–î test_result
                #
                # test_info = read_db_row("tests_result", chat_id=message.chat.id, status="–ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è")
                # question_ids = ast.literal_eval(test_info['generic_questions'])
                # test_id = test_info['test_id']
                # view_test(message, str(question_ids[0]), str(test_id))
            else:
                bot.send_message(message.chat.id, "–ü–∏—Å–∞—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ... –ù–∞–∂–∏–º–∞–π—Ç–µ –ª—É—á—à–µ –∫–Ω–æ–ø–∫–∏. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏...")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç.
def add_new_questions(input_call, input_message):
    try:
        # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
        chat_id = input_call.message.chat.id
        call = input_call
        write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
        bot.answer_callback_query(callback_query_id=call.id,
                                  text="–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–æ–≤.\n–ü–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ Excel –¥–æ–∫—É–º–µ–Ω—Ç –≤ —á–∞—Ç.\n",
                                  show_alert=True)
    except:
        try:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
            chat_id = input_message.message.chat.id
            call = input_message
            if "–î–æ–±–∞–≤–∏—Ç—å" in call.data:
                print("–î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å")
                confirm_question(call)
            elif "–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å" in call.data:
                remove_question(call)
        except:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
            chat_id = input_message.chat.id
            message = input_message

            try:
                input_document_question(message)
            except:
                if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                    write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="mainmenu")
                    main_menu_to_user(message=input_message)
                else:
                    bot.send_message(message.chat.id,
                                     "–ù–µ—á–µ –ø–∏—Å–∞—Ç—å. –î–æ–∫—É–º–µ–Ω—Ç —Å–∫–∏–Ω—å...")



# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!!!!!!

def admin_tests_result(input_call, input_message):
    try:
        # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
        chat_id = input_call.message.chat.id
        call = input_call
        write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤")
        # –ü–µ—Ä–≤–∏—á–Ω–æ –≤—ã–≤–æ–¥–∏–º 4 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ, –ó–∞ –º–µ—Å—è—Ü, –∑–∞ 2, –∑–∞ 3.

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = periods_keyboard(call)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫", reply_markup=keyboard)

    except:
        try:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
            chat_id = input_message.message.chat.id
            call = input_message
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫.
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞! " + call.data)
            if "cal:" in call.data:
                periods_keyboard_onclick(call)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ.
            if "test_id" in call.data:
                open_test_info(call)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Å–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            if "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" in call.data:
                send_result(call)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–µ—Å—Ç–µ"
            if "–ù–∞–ø–æ–º–Ω–∏—Ç—å:" in call.data:
                print("–ù–∞–ø–æ–º–∏–Ω–∞–µ–º!")
                remember_test(call)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç"

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤–µ—Ä–Ω—É—Ç—å"
            if "–°–≤–µ—Ä–Ω—É—Ç—å" in call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª–µ–π"
            if "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" in call.data:
                add_users_to_test(call)

        except:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
            chat_id = input_message.chat.id
            message = input_message
            text = message.text
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–ø—Ä–æ–≤–æ–¥. —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—Å–∫—Ä—ã—Ç–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.–î–æ–±–∞–≤–∏—Ç—å –≤ test_created –∫–æ–ª–æ–Ω–∫—É open_text

            write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="mainmenu")
            main_menu_to_user(message=input_message)

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥.
def periods_keyboard(call):
    # –ó–∞–±–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Å—è—Ü–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏.
    months = {
        1: "–Ø–Ω–≤–∞—Ä—å",
        2: "–§–µ–≤—Ä–∞–ª—å",
        3: "–ú–∞—Ä—Ç",
        4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π",
        6: "–ò—é–Ω—å",
        7: "–ò—é–ª—å",
        8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å",
        10: "–û–∫—Ç—è–±—Ä—å",
        11: "–ù–æ—è–±—Ä—å",
        12: "–î–µ–∫–∞–±—Ä—å"
    }
    if "cal:year" in call.data:
        now_year = call.data.split(":")[2]
        next_year = int(now_year) + 1
        prev_year = int(now_year) - 1
    else:
        now = datetime.now()
        now_year = now.year
        next_year = int(now_year) + 1
        prev_year = int(now_year) - 1

    keyboard = types.InlineKeyboardMarkup()

    year = types.InlineKeyboardButton(text=str(now_year), callback_data="12345")
    left_year = types.InlineKeyboardButton(text="<=", callback_data="cal:year:" + str(prev_year))
    right_year = types.InlineKeyboardButton(text="=>", callback_data="cal:year:" + str(next_year))
    keyboard.row(left_year, year, right_year)

    tests_count = {}
    for i in range(1,13):
        month = str(i)
        year = str(now_year)
        if len(month) < 2:
            month = "0" + month
        datefrom = (year, month)
        datefrom_info = "%s-%s" % datefrom
        try:
            ids = read_db_array_like("tests_created", "id", time_off=datefrom_info)
        except:
            ids = []
        tests_count[i] = len(ids)

    for i in range(1, 12, 3):


        btn1 = types.InlineKeyboardButton(text=months[i] + "(" + str(tests_count[i])+ ")",
                                          callback_data="cal:month:" + str(i) + ":" + str(now_year))
        btn2 = types.InlineKeyboardButton(text=months[i+1] + "(" + str(tests_count[i+1])+ ")",
                                          callback_data="cal:month:" + str(i+1) + ":" + str(now_year))
        btn3 = types.InlineKeyboardButton(text=months[i+2] + "(" + str(tests_count[i+2])+ ")",
                                          callback_data="cal:month:" + str(i+2) + ":" + str(now_year))
        keyboard.row(btn1, btn2, btn3)


    close = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="–ó–∞–∫—Ä—ã—Ç—å")
    keyboard.row(close)

    return keyboard

def periods_keyboard_onclick(call):
    if "cal:year" in call.data:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = periods_keyboard(call)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫", reply_markup=keyboard)
    elif "cal:month" in call.data:
        month = call.data.split(":")[2]
        year = call.data.split(":")[3]
        if len(month) < 2:
            month = "0" + month
        datefrom = (year, month)
        datefrom_info = "%s-%s" % datefrom
        try:
            tests_ids = read_db_array_like("tests_created", "id", time_off=datefrom_info)
        except:
            tests_ids = []
        if len(tests_ids) > 0:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for test_id in tests_ids:
                test_info = read_db_row("tests_created", id=test_id)
                if test_info['open_status'] == "close":
                    status_icon = ""
                else:
                    status_icon = ""
                if test_info['time_off'] < datetime.now() and test_info['open_status'] == "close":
                    date_icon = "üÜò"
                elif test_info['time_off'] > datetime.now() and test_info['open_status'] == "close":
                    date_icon = "‚ú≥Ô∏è"
                else:
                    date_icon = "üÜó"
                name_button = types.InlineKeyboardButton(text=status_icon + date_icon + "–î–æ " + str(test_info['time_off'])[:-9] + " üî≥" + test_info['test_name'], callback_data="test_id:"+str(test_id))
                # date_button = types.InlineKeyboardButton(text="–î–æ " + str(test_info['time_off'])[:-16], callback_data="12345")
                # status_button = types.InlineKeyboardButton(text=test_info['open_status'], callback_data="12345")
                keyboard.row(name_button)
                # keyboard.row(date_button, status_button)
            hide_button = types.InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å", callback_data="–°–≤–µ—Ä–Ω—É—Ç—å")
            keyboard.row(hide_button)
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ—á–µ–Ω—å —Ç–µ—Å—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü", reply_markup=keyboard)
    else:
        pass

def open_test_info(call):
    test_id = call.data.split(":")[1]
    test_info = read_db_row("tests_created", id=test_id)
    user_ids = ast.literal_eval(test_info['user_ids'])

    test_name = str(test_info['test_name'])
    creator = str(test_info['creator_id'])
    open_status = str(test_info['open_status'])
    time_on = str(test_info['time_on'])[:-7]
    time_off = str(test_info['time_off'])[:-16]
    user_info_text = ""
    for user_id in user_ids:
        user_info = read_db_row("user_base", chat_id=user_id)
        try:
            user_test_info = read_db_row("tests_result", chat_id=user_id, test_id=test_id)
            result = str(user_test_info['result_percent'])
        except:
            result = "–ï—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª"
        user_info_text += str(str(user_info['full_name']) + " " + str(result) + "% \n")


    output_text = "<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: </b>" + str(test_name) + "\n\n " \
                  "<b>–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: </b> " + str(creator) + " \n " \
                  "<b>–û—Ç–∫—Ä—ã—Ç—ã –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: </b> " + str(open_status) + " \n " \
                  "<b>–°–æ–∑–¥–∞–Ω: </b> " + str(time_on) + " \n " \
                  "<b>–ü—Ä–æ–π—Ç–∏ –¥–æ: </b> " + str(time_off) + " \n " \
                  "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> \n " + str(user_info_text) + " "

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    send_button = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"+str(test_id))
    keyboard.row(send_button)
    remember_button = types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data="–ù–∞–ø–æ–º–Ω–∏—Ç—å:" + str(test_id))
    keyboard.row(remember_button)
    add_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:" + str(test_id))
    keyboard.row(add_button)
    hide_button = types.InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å", callback_data="–°–≤–µ—Ä–Ω—É—Ç—å")
    keyboard.row(hide_button)

    bot.send_message(call.message.chat.id, output_text, parse_mode="HTML", reply_markup=keyboard)

def send_result(call):
    test_id = call.data.split(":")[1]
    test_info = read_db_row("tests_created", id=test_id)
    time_on = str(test_info['time_on'])[:-16]
    time_off = str(test_info['time_off'])[:-16]
    test_name = str(test_info['test_name'])
    user_ids = ast.literal_eval(test_info['user_ids'])
    for user_id in user_ids:
        user_info = read_db_row("user_base", chat_id=user_id)
        try:
            user_test_info = read_db_row("tests_result", chat_id=user_id, test_id=test_id)
            result = str(user_test_info['result_percent']) + " %"
        except:
            result = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –¢–µ—Å—Ç –Ω–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏."

        text = ("‚ÄºÔ∏è\nC " + time_on + " –ø–æ " + time_off + " –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è —Ç–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>" + test_name + "</b>" +
                "\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. \n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç : " + result)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        hide_button = types.InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å", callback_data="–°–≤–µ—Ä–Ω—É—Ç—å")
        keyboard.row(hide_button)
        bot.send_message(user_id, text, parse_mode="HTML")
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –Ω–∞ "Open", —á—Ç–æ –∑–Ω–∞—á–∏—Ç "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" –∞ —Å–∞–º —Ç–µ—Å—Ç –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.
    write_db_update_ultimate("tests_created", find__id=test_id, open_status="open")


def remember_test(call):
    test_id = call.data.split(":")[1]
    test_info = read_db_row("tests_created", id=test_id)
    user_ids = ast.literal_eval(test_info['user_ids'])
    complete_user_ids = read_db_array("tests_result", "chat_id", test_id=test_id)
    uncomplete_user_ids = list(set(user_ids) - set(complete_user_ids))
    test_name = str(test_info['test_name'])
    time_off = str(test_info['time_off'])[:-16]
    text = "‚ÄºÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>" + test_name + "</b>.\n–ï–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –¥–æ " + time_off
    for user_id in uncomplete_user_ids:
        bot.send_message(user_id, text, parse_mode="HTML")


def add_users_to_test(call):
    pass
    test_id = call.data.split(":")[1]
    # –í—ã–∫–∞—Ç–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    # –ü–æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã—Å–∫–∞–∫–∏–≤–∞—é—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö" –∏–ª–∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö.
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ -   –≤—ã–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ.
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ —Ç–µ—Å—Ç—É.


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
def view_goose_menu(input_call, input_message):
    print("–í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–æ–≤–∞—Ä–∞")
    try:
        # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
        chat_id = input_call.message.chat.id
        call = input_call
        write_db_update_ultimate("user_base", find__chat_id=chat_id, operation=call.data)

        bot.delete_message(call.message.chat.id, call.message.message_id)
        brands = read_db_array('goose', "brand", category=str(call.data))
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for brand in set(brands):
            callback_button = types.InlineKeyboardButton(text=brand, callback_data=str(brand))
            keyboard.row(callback_button)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –º–µ–Ω—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        callback_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
        keyboard.row(callback_button)
        bot.send_message(call.message.chat.id, "<b>" + call.data + "</b>", reply_markup=keyboard, parse_mode="HTML")
    except:
        try:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω–∞
            chat_id = input_message.message.chat.id
            call = input_message


            # –í—ã–≤–æ–¥ –ø–µ—Ä–µ—á–Ω—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.
            if call.data in read_db_array("goose", "brand"):
                # bot.delete_message(call.message.chat.id, call.message.message_id)
                gooses = read_db_array('goose', "name", brand=str(call.data))
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                for goose in set(gooses):
                    callback_button = types.InlineKeyboardButton(text=goose, callback_data=str(goose))
                    keyboard.row(callback_button)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –º–µ–Ω—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                callback_button = types.InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å", callback_data="–°–≤–µ—Ä–Ω—É—Ç—å")
                keyboard.row(callback_button)
                bot.send_message(call.message.chat.id, "<b>" + call.data + "</b>", reply_markup=keyboard, parse_mode="HTML")

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
            elif call.data in read_db_array("goose", "name"):

                goose_info = read_db_row("goose", name=call.data)
                goose_message = ""
                item1 = ""
                goose_id = goose_info['id']
                for item in goose_info:
                    if item == "category":
                        item1 = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                    if item == "brand":
                        item1 = "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"
                    if item == "name":
                        item1 = "–ú–æ–¥–µ–ª—å"
                    if item == "description":
                        item1 = "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    if item == "site_url":
                        item1 = "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç"
                    if item == "video_url":
                        item1 = "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"
                    if item == "text":
                        item1 = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    if item == "features":
                        item1 = "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"
                    if item == "comments":
                        item1 = "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
                    goose_message +="‚ö†Ô∏è" + "<b>" + str(item1) + "</b>" + "\n" + str(goose_info[item]) + "\n"

                # +–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å –∏ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"
                keyboard = types.InlineKeyboardMarkup()
                callback_button = types.InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å", callback_data="–°–≤–µ—Ä–Ω—É—Ç—å")
                callback_button1 = types.InlineKeyboardButton(text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                                                              callback_data="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:–Æ–∑–µ—Ä:" + str(goose_id))
                keyboard.add(callback_button)
                keyboard.add(callback_button1)
                # C–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
                bot.send_message(call.message.chat.id, goose_message, parse_mode="HTML", disable_web_page_preview=False,
                                 reply_markup=keyboard)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤–µ—Ä–Ω—É—Ç—å"
            elif "–°–≤–µ—Ä–Ω—É—Ç—å" in call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            elif "–ù–∞–∑–∞–¥" in call.data:
                write_db_update_ultimate("user_base", find__chat_id=call.message.chat.id, operation="mainmenu")
                main_menu_to_user(call=call)
                bot.answer_callback_query(call.id, "–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
            elif "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ" in call.data:
                edit_comment(call)


        except:
            # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
            chat_id = input_message.chat.id
            message = input_message
            text = message.text
            if text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                write_db_update_ultimate("user_base", find__chat_id=chat_id, operation="mainmenu")
                main_menu_to_user(message=input_message)
            else:
                edit_comment_confirm(message)

def edit_comment(call):
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    user_type = call.data.split(":")[1]
    goose_id = call.data.split(":")[2]
    write_db_insert("utility", chat_id=call.message.chat.id, operand="goose_id", value=goose_id)
    if user_type == "–Æ–∑–µ—Ä":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è:–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ ")
    else:
        pass  # !!!!–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.

def edit_comment_confirm(message):
    #–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    goose_id = read_db_row("utility", chat_id=message.chat.id, operand="goose_id")['value']
    goose_comment = read_db_row("goose", id=goose_id)['comments']
    if "None" in str(goose_comment):
        goose_comment = ""
    goose_comment = str(goose_comment) + "\n"+message.text
    write_db_update_ultimate("goose", find__id=goose_id, comments=goose_comment)
    msg = bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    time.sleep(1)
    deteterow_db_universe("utility", "chat_id", message.chat.id)
    bot.delete_message(message.chat.id, msg.message_id)
